{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getCoordinates","event","includes","type","pageX","canvas","offsetLeft","pageY","offsetTop","touches","startPaint","e","isPainting","coordinates","x","y","drawLine","firstX","firstY","secondX","secondY","context","strokeStyle","lineJoin","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","paint","newX","newY","exit","state","this","document","querySelector","getContext","setAttribute","window","innerWidth","innerHeight","addEventListener","className","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,qIC8F5BC,G,8DAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAyBRC,eAAiB,SAACC,GAEhB,MAAI,CAAC,YAAa,aAAaC,SAASD,EAAME,MAErC,CAACF,EAAMG,MAAQ,EAAKC,OAAOC,WAAYL,EAAMM,MAAQ,EAAKF,OAAOG,WAGjE,CACLP,EAAMQ,QAAQ,GAAGL,MAAQ,EAAKC,OAAOC,WACrCL,EAAMQ,QAAQ,GAAGF,MAAQ,EAAKF,OAAOG,YAnCxB,EAwCnBE,WAAa,SAACC,GAEZ,EAAKC,YAAa,EAClB,IAAIC,EAAc,EAAKb,eAAeW,GACtC,EAAKG,EAAID,EAAY,GACrB,EAAKE,EAAIF,EAAY,IA7CJ,EAgDnBG,SAAW,SAACC,EAAQC,EAAQC,EAASC,GAEnC,EAAKC,QAAQC,YAAc,QAC3B,EAAKD,QAAQE,SAAW,QACxB,EAAKF,QAAQG,UAAY,EAEzB,EAAKH,QAAQI,YACb,EAAKJ,QAAQK,OAAOP,EAASC,GAC7B,EAAKC,QAAQM,OAAOV,EAAQC,GAC5B,EAAKG,QAAQO,YAGb,EAAKP,QAAQQ,UA5DI,EA+DnBC,MAAQ,SAACnB,GACP,GAAI,EAAKC,WAAY,CAAC,IAAD,EACA,EAAKZ,eAAeW,GADpB,mBACdoB,EADc,KACRC,EADQ,KAEnB,EAAKhB,SAAS,EAAKF,EAAG,EAAKC,EAAGgB,EAAMC,GAGpC,EAAKlB,EAAIiB,EACT,EAAKhB,EAAIiB,IAtEM,EA0EnBC,KAAO,WACL,EAAKrB,YAAa,GAzElB,EAAKsB,MAAQ,GAGb,EAAKpB,EAAI,GACT,EAAKC,EAAI,GACT,EAAKH,WAAa,GAClB,EAAKP,OAAS,GACd,EAAKgB,QAAU,GATE,E,gEAajBc,KAAK9B,OAAS+B,SAASC,cAAc,UACrCF,KAAKd,QAAUc,KAAK9B,OAAOiC,WAAW,MACtCH,KAAK9B,OAAOkC,aAAa,QAASC,OAAOC,YACzCN,KAAK9B,OAAOkC,aAAa,SAAUC,OAAOE,aAC1CP,KAAK9B,OAAOsC,iBAAiB,YAAaR,KAAKzB,YAC/CyB,KAAK9B,OAAOsC,iBAAiB,aAAcR,KAAKzB,YAChDyB,KAAK9B,OAAOsC,iBAAiB,YAAaR,KAAKL,OAC/CK,KAAK9B,OAAOsC,iBAAiB,YAAaR,KAAKL,OAC/CK,KAAK9B,OAAOsC,iBAAiB,UAAWR,KAAKF,MAC7CE,KAAK9B,OAAOsC,iBAAiB,aAAcR,KAAKF,MAChDE,KAAK9B,OAAOsC,iBAAiB,WAAYR,KAAKF,Q,+BAwD9C,OACE,yBAAKW,UAAU,OACb,sC,GAlFUC,IAAMC,YCQJC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cbed46b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n\n    }\n    this.x = \"\";\n    this.y = \"\";\n    this.isPainting = \"\";\n    this.canvas = \"\";\n    this.context = \"\"\n  }\n  \n  componentDidMount() {\n    this.canvas = document.querySelector('canvas')\n    this.context = this.canvas.getContext('2d')\n    this.canvas.setAttribute('width', window.innerWidth)\n    this.canvas.setAttribute('height', window.innerHeight)\n    this.canvas.addEventListener('mousedown', this.startPaint)\n    this.canvas.addEventListener('touchstart', this.startPaint)\n    this.canvas.addEventListener(\"mousemove\", this.paint);\n    this.canvas.addEventListener(\"touchmove\", this.paint);\n    this.canvas.addEventListener(\"mouseup\", this.exit);\n    this.canvas.addEventListener(\"mouseleave\", this.exit);\n    this.canvas.addEventListener(\"touchend\", this.exit);\n  }\n\n  getCoordinates = (event) => {\n    // check to see if mobile or desktop\n    if ([\"mousedown\", \"mousemove\"].includes(event.type)) {\n      // click events\n      return [event.pageX - this.canvas.offsetLeft, event.pageY - this.canvas.offsetTop];\n    } else {\n      // touch coordinates\n      return [\n        event.touches[0].pageX - this.canvas.offsetLeft,\n        event.touches[0].pageY - this.canvas.offsetTop\n      ];\n    }\n  }\n\n  startPaint = (e) => {\n    // change the old coordinates to the new ones*\n    this.isPainting = true;\n    let coordinates = this.getCoordinates(e);\n    this.x = coordinates[0];\n    this.y = coordinates[1];\n  }\n\n  drawLine = (firstX, firstY, secondX, secondY) => {\n    // set the attributes of the line\n    this.context.strokeStyle = \"black\";\n    this.context.lineJoin = \"round\";\n    this.context.lineWidth = 5;\n  \n    this.context.beginPath();\n    this.context.moveTo(secondX, secondY);\n    this.context.lineTo(firstX, firstY);\n    this.context.closePath();\n  \n    // actually draw the path*\n    this.context.stroke();\n  }\n  \n  paint = (e) => {\n    if (this.isPainting) {\n      let [newX, newY] = this.getCoordinates(e);\n      this.drawLine(this.x, this.y, newX, newY);\n  \n      // Set x and y to our new coordinates\n      this.x = newX;\n      this.y = newY;\n    }\n  }\n\n  exit = () => {\n    this.isPainting = false;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas>\n\n        </canvas>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}